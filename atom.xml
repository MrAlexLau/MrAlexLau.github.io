<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bits on Bits on Bits]]></title>
  <link href="http://bitsonbitsonbits.com/atom.xml" rel="self"/>
  <link href="http://bitsonbitsonbits.com/"/>
  <updated>2014-09-20T12:16:51-05:00</updated>
  <id>http://bitsonbitsonbits.com/</id>
  <author>
    <name><![CDATA[Alex Lau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[launchctl "nothing found to load"]]></title>
    <link href="http://bitsonbitsonbits.com/blog/launchctl-overrides/"/>
    <updated>2014-09-09T22:15:00-05:00</updated>
    <id>http://bitsonbitsonbits.com/blog/launchctl-overrides</id>
    <content type="html"><![CDATA[<p>When you get the error &ldquo;nothing found to load&rdquo; after running <code>launchctl load</code>. Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; launchctl load ~/Library/LaunchAgents/org.virtualbox.vboxwebsrv.plist
</span><span class='line'>nothing found to load
</span></code></pre></td></tr></table></div></figure>


<p>First check to make sure the package isn&rsquo;t listed as disabled in the global overrides file:
<code>/private/var/db/launchd.db/com.apple.launchd/overrides.plist</code></p>

<p>If the package isn&rsquo;t listed in the overrides file, <a href="http://launchd.info/">launchd documentation</a> offers another file it may be located in.
First get your user id by running <code>id</code> on the command line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; id -u
</span><span class='line'>201
</span></code></pre></td></tr></table></div></figure>


<p>Now look in this file:
/var/db/launchd.db/com.apple.launchd.peruser.<strong><em>201</em></strong>/overrides.plist. The override entry should be listed in this file.</p>

<p>In the example given above for virtualbox, you would remove these lines from that overrides.plist file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;key&gt;org.virtualbox.vboxwebsvc&lt;/key&gt;
</span><span class='line'>&lt;dict&gt;
</span><span class='line'>  &lt;key&gt;Disabled&lt;/key&gt;
</span><span class='line'>  &lt;<span class="nb">true</span>/&gt;
</span><span class='line'>&lt;/dict&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyGems Versioning]]></title>
    <link href="http://bitsonbitsonbits.com/blog/rubygems-versioning/"/>
    <updated>2014-03-18T20:17:00-05:00</updated>
    <id>http://bitsonbitsonbits.com/blog/rubygems-versioning</id>
    <content type="html"><![CDATA[<p>From the <a href="http://guides.rubygems.org/patterns/#semantic_versioning">RubyGems guide</a>:</p>

<blockquote><p><strong>PATCH</strong> 0.0.x level changes for implementation level detail changes, such as small bug fixes</p>

<p><strong>MINOR</strong> 0.x.0 level changes for any backwards compatible API changes, such as new functionality/features</p>

<p><strong>MAJOR</strong> x.0.0 level changes for backwards incompatible API changes, such as changes that will break existing users code if they update</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gmail Snooze]]></title>
    <link href="http://bitsonbitsonbits.com/blog/gmail-snooze/"/>
    <updated>2014-03-17T00:00:00-05:00</updated>
    <id>http://bitsonbitsonbits.com/blog/gmail-snooze</id>
    <content type="html"><![CDATA[<p>I&rsquo;m a huge fan of the app <a href="http://www.mailboxapp.com/">Mailbox</a> for IOS. In my opinion, its killer feature is the ability to &lsquo;snooze&rsquo; emails, so that they are hidden for the time being, but reappear when they are relevant again.</p>

<p>I wanted to have the same functionality through the Gmail web interface, and while googling I stumbled upon a Gmail <a href="http://gmailblog.blogspot.com/2011/07/gmail-snooze-with-apps-script.html">blog post that explains just how to do that</a>. It turns out that this has actually been available for quite some time (since 2011).</p>

<p>What surprised me even more is that you can write custom javascript scripts to process your email, and that these scripts can be executed on a recurring basis.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My 4 Stages of Version Control]]></title>
    <link href="http://bitsonbitsonbits.com/blog/my-4-stages-of-version-control/"/>
    <updated>2013-11-04T00:00:00-06:00</updated>
    <id>http://bitsonbitsonbits.com/blog/my-4-stages-of-version-control</id>
    <content type="html"><![CDATA[<p>Version control &ndash; it&rsquo;s great. It&rsquo;s also amazing how you don&rsquo;t realize how much better it <em>can</em> be until you use a better tool. Personally, I like to think I&rsquo;ve gone through 4 main &ldquo;stages&rdquo; of version control, each stage being a more useful and effective addition to my workflow than the previous.</p>

<h2>Stage 1 &ndash; Local Backups</h2>

<p><em>&ldquo;Hmmmm, I&rsquo;m planning on making a lot of change to this code, better make a copy of the file <strong>hello.cpp</strong>. I&rsquo;ll call it <strong>hello2.cpp</strong>! I&rsquo;m a genius!&rdquo;</em></p>

<p>Stage 1 is every n00b&rsquo;s favorite, just making another copy of the file. Something go horribly wrong while you were in that 4am coding frenzy? You&rsquo;ve always got that copy lying around, assuming you had the foresight to make it.</p>

<h2>Stage 2 &ndash; Offsite Backups</h2>

<p><em>&ldquo;Hey (insert programming partner&rsquo;s name here), we&rsquo;re going to need to share our code somehow! How about I work on it Friday night, then email you a zip file of my progress? Then you can work on it Saturday!&rdquo;</em></p>

<p>Stage 2 is only slightly better than stage 1. As least you (and your partner) have a copy of the code the next time you spill some hot chocolate on your laptop.</p>

<h2>Stage 3 &ndash; Centralized Version Control</h2>

<p><em>&ldquo;Wow, svn is really cool! You can make savepoints in your code?! Other people can get your code too, and contribute to it?!&rdquo;</em></p>

<p>Using an <strong>actual</strong> version control system for the first time is mindblowing in the omg-why-didn&rsquo;t-I-know-about-this-before kind of way. Once you realize how to commit and branch code, there&rsquo;s no turning back.</p>

<h2>Stage 4 &ndash; Distributed Version Control</h2>

<p><em>&ldquo;I don&rsquo;t really get what the big deal is with git. I mean it&rsquo;s pretty much the same as &ndash; oh wait, oh wait no it&rsquo;s not. Ok. Yes. This is really cool. LET FREEDOM RING.&rdquo;</em></p>

<p>Just when I was telling my friends how great svn is, git came along and changed everthing. Changes are stored extremely efficiently, making the act of pulling changes quick even when there are a lot of files modified. Branches with git are &ldquo;cheap&rdquo; in that they are easily mergeable with other branches. With git, life is good. With github, life is great. I&rsquo;ll go into that more in another post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autostarting Homebrew Packages]]></title>
    <link href="http://bitsonbitsonbits.com/blog/autostarting-homebrew-packages/"/>
    <updated>2013-10-27T19:48:00-05:00</updated>
    <id>http://bitsonbitsonbits.com/blog/autostarting-homebrew-packages</id>
    <content type="html"><![CDATA[<p><a href="http://brew.sh">Homebrew</a> has made my life a lot easier when setting up new mac development environments. To install a new package is as easy as typing <code>brew install mysql</code> on the command line. (Other programs I commonly install with Homebrew are git, mongodb, and postgresql.)</p>

<p>Sometimes you want a program to start a daemon (background) process when you log in. For example, I can start mongodb&rsquo;s daemon with the <code>mongod</code> command, but it&rsquo;d be nicer if it just started automatically.</p>

<p>Fortunately Homebrew has a way to do this! Simply type <code>brew info mongo</code>. If mongod isn&rsquo;t set up to run automatically, the last bit of output will look like this:</p>

<pre><code>To have launchd start mongodb at login:
    ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents
Then to load mongodb now:
    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist
Or, if you don't want/need launchctl, you can just run:
    mongod
</code></pre>

<p>Note how you not only see how to start mongodb upon login, but also it shows you the name of mongo&rsquo;s daemon process, mongod.</p>
]]></content>
  </entry>
  
</feed>
